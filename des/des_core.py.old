# Author: Ryan Riccio
# Date: Sept 22nd, 2022
# Program: DES backend
import homework09 as hw


DESIRED_BYTE_LENGTH = 8

# 32-bit to 48-bit
_EXPAND = [31, 0, 1, 2, 3, 4, 3, 4,
           5, 6, 7, 8, 7, 8, 9, 10,
           11, 12, 11, 12, 13, 14, 15, 16,
           15, 16, 17, 18, 19, 20, 19, 20,
           21, 22, 23, 24, 23, 24, 25, 26,
           27, 28, 27, 28, 29, 30, 31, 0]

# 32-bit permutation after S-BOX substitution
_S_BOX_PERMUTATION = [15, 6, 19, 20, 28, 11, 27, 16,
                      0, 14, 22, 25, 4, 17, 30, 9,
                      1, 7, 23, 13, 31, 26, 2, 8,
                      18, 12, 29, 5, 21, 10, 3, 24]

# Initial permutation on incoming block
_INIT_PERMUTATION = [57, 49, 41, 33, 25, 17, 9, 1,
                     59, 51, 43, 35, 27, 19, 11, 3,
                     61, 53, 45, 37, 29, 21, 13, 5,
                     63, 55, 47, 39, 31, 23, 15, 7,
                     56, 48, 40, 32, 24, 16, 8, 0,
                     58, 50, 42, 34, 26, 18, 10, 2,
                     60, 52, 44, 36, 28, 20, 12, 4,
                     62, 54, 46, 38, 30, 22, 14, 6]

# Inverse of _INITIAL_PERMUTATION
_FINAL_PERMUTATION = [39, 7, 47, 15, 55, 23, 63, 31,
                      38, 6, 46, 14, 54, 22, 62, 30,
                      37, 5, 45, 13, 53, 21, 61, 29,
                      36, 4, 44, 12, 52, 20, 60, 28,
                      35, 3, 43, 11, 51, 19, 59, 27,
                      34, 2, 42, 10, 50, 18, 58, 26,
                      33, 1, 41, 9, 49, 17, 57, 25,
                      32, 0, 40, 8, 48, 16, 56, 24]

_S_BOXES = [
    [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
     [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
     [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
     [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
     ],
    [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
     [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
     [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
     [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
     ],
    [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
     [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
     [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
     [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
     ],
    [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
     [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
     [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
     [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
     ],
    [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
     [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
     [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
     [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
     ],
    [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
     [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
     [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
     [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
     ],
    [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
     [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
     [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
     [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
     ],
    [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
     [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
     [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
     [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
     ]
]

# 64-bit to 56-bit permutation on the key
_KEY_PERMUTATION1 = [56, 48, 40, 32, 24, 16, 8, 0,
                     57, 49, 41, 33, 25, 17, 9, 1,
                     58, 50, 42, 34, 26, 18, 10, 2,
                     59, 51, 43, 35, 62, 54, 46, 38,
                     30, 22, 14, 6, 61, 53, 45, 37,
                     29, 21, 13, 5, 60, 52, 44, 36,
                     28, 20, 12, 4, 27, 19, 11, 3]

# 56-bit to 48-bit permutation on the key
_KEY_PERMUTATION2 = [13, 16, 10, 23, 0, 4, 2, 27,
                     14, 5, 20, 9, 22, 18, 11, 3,
                     25, 7, 15, 6, 26, 19, 12, 1,
                     40, 51, 30, 36, 46, 54, 29, 39,
                     50, 44, 32, 47, 43, 48, 38, 55,
                     33, 52, 45, 41, 49, 35, 28, 31]

# Matrix that determines the shift for each round of keys
_KEY_SHIFT = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]


def _add_padding(message):
    """
    Add padding to the end of each bytestring. The value of the padding is equal to the length of the padding.

    :param bytes message: bytestring message to add padding to
    :return: bytestring of the padded message
    :rtype: bytes
    """
    return message + bytes([DESIRED_BYTE_LENGTH - len(message) % DESIRED_BYTE_LENGTH] *
                           (DESIRED_BYTE_LENGTH - len(message) % DESIRED_BYTE_LENGTH))


def _rem_padding(message):
    """
     Remove padding from the end of each bytestring. The amount to remove is specified by the padding value.

    :param bytes message: bytestring message to remove padding from
    :return: bytestring of the message
    :rtype: bytes
    """
    return message[:len(message) - message[-1]]


def _bytes_to_bit_array(byte_string):
    """
    Convert bytestring to array of bits.

    :param bytes byte_string: bytestring to convert to bits
    :return: array of bits
    :rtype: list
    """
    # convert bytestring to ints, ints to binary, fill leading zeros, convert each string to int and return
    bits = bin(int.from_bytes(byte_string, byteorder="big"))[2:].zfill(len(byte_string) * DESIRED_BYTE_LENGTH)
    return [int(bit) for bit in bits]


def _bit_array_to_bytes(bit_array):
    """
    Convert arrray of bits to bytestring.

    :param list bit_array: bit array to convert to bytestring
    :return: bytestring from bit array
    :rtype: bytes
    """
    # convert each bit to string, then join the string to 8-bit sections, convert 8-bit sections to int base 2,
    # convert ints to bytes and return bytestring
    bit_array = [str(bit) for bit in bit_array]
    bit_array = ["".join(bit_array[pos:pos + DESIRED_BYTE_LENGTH]) for pos in
                 range(0, len(bit_array), DESIRED_BYTE_LENGTH)]
    return bytes([int(byte, 2) for byte in bit_array])


def _nsplit(data, split_size=64):
    """
    Splits data into equal sections of 'split_size' length. (default=64)
    Asymmetrical data will yield the last section being shorter.

    :param data: data to be split
    :param int split_size: size of each yielded split
    :return: iterator which gives data block
    :rtype: generator
    """
    for idx in range(0, len(data), split_size):
        yield data[idx:idx + split_size]


def _as_hex(*args, **kwargs):
    """
    Return byte string in hex.

    :argument: (pos arg) data to print.
    :key encrypted: bytestring to print.
    :type encrypted: bytes
    :key block: block of bits to print.
    :type block: list[int]
    :key length: length for zfill.
    :type length: int
    :return: string of hex data.
    :rtype: str
    """
    if args:
        if isinstance(args[0], bytes):
            block = _bytes_to_bit_array(args[0])
        elif isinstance(args[0], list):
            block = args[0]
        else:
            raise ValueError("Invalid data input.")
    else:
        if 'block' in kwargs:
            block = kwargs['block']
        elif 'encrypted' in kwargs:
            block = _bytes_to_bit_array(kwargs['encrypted'])
        else:
            raise ValueError("No data was given.")

    if 'length' in kwargs:
        length = kwargs['length']
    else:
        length = len(block) // 4

    strings = [str(bit) for bit in block]
    byte = int("".join(strings), 2)
    data = hex(byte)[2:].zfill(length)
    return data


def _lshift(sequence, n):
    """
    Shifts sequence of bytes left n times.

    :param list sequence: sequence to shift
    :param int n: amount to shift by
    :return: shifted list
    :rtype: list
    """
    return sequence[n:] + sequence[:n]


def _xor(x, y):
    """
    XOR two iterables together (if lengths are different, only XOR where they overlap).

    :param iterable x: first list of values
    :param iterable y: second list of values
    :return: list of XORed values
    :rtype: list
    """
    return [x[idx] ^ y[idx] for idx in range(min(len(x), len(y)))]


def _permute(block, table):
    """
    Shuffle a block of bits based on a permutation table.

    :param list block: list of bits to shuffle
    :param list table: permutation table to use
    :return: list of shuffled bits
    :rtype: list
    """
    return [block[x] for x in table]


def _substitute(block):
    """
    Perform DES SBOX substitutions

    :param list block: 48 bits of input
    :return: list of 32 bits of data
    """
    # convert everything to string (int() requires string)
    block = [str(item) for item in block]
    smaller_block = []

    # loop through each 6 bit sections
    for idx, current_block in enumerate(_nsplit(block, split_size=6)):
        # convert bits to int to get rows and columns
        row = int("".join(current_block[0] + current_block[-1]), 2)
        col = int("".join(current_block[1:-1]), 2)
        # get substitution and add each bit to list and convert back to int
        bits = bin(_S_BOXES[idx][row][col])[2:].zfill(4)
        for ch in bits:
            smaller_block.append(int(ch))

    return smaller_block


def _generate_sub_keys(encryption_key):
    """
    Generates 16 DES sub-keys from a 64-bit encryption key. The encryption
    key should be given as a bytes string. Output is a 16-element list of
    bit arrays, where each array is a list of 48 ones/zeroes.

    :param bytes encryption_key: 64-bit bytestring to use for key.
    :return: 16 48-bit DES sub-keys.
    :rtype: list[list[int]]
    """
    sub_keys = []
    key_bits = _bytes_to_bit_array(encryption_key)
    k_0 = _permute(key_bits, _KEY_PERMUTATION1)  # 56-bit key

    # split into 2 28-bit parts
    right = k_0[28:]
    left = k_0[:28]
    for i in range(16):
        # shift based on shift table
        left = _lshift(left, _KEY_SHIFT[i])
        right = _lshift(right, _KEY_SHIFT[i])
        # permute and add
        k_i = _permute(left + right, _KEY_PERMUTATION2)
        sub_keys.append(k_i)
    return sub_keys


def _function(right_side, key):
    """
    Performs the DES encryption "function" on the 32-bit Right Side of a
    64-bit block. This operation is invoked 16 times for each block, each
    time with a different subkey.

    :param list[int] right_side: 32-bits of the right side of the block.
    :param list[int] key: 48-bit sub-key.
    :return: 32-bit processed right side.
    :rtype: list[int]
    """
    right_side = _permute(right_side, _EXPAND)  # 48-bits
    block = _xor(right_side, key)  # 48-bits
    block = _substitute(block)  # 32-bits
    block = _permute(block, _S_BOX_PERMUTATION)  # post S-BOX permutation
    return block  # 32-bits


def _crypt_block(block, sub_keys):
    """
    Encrypt a block of bits for DES.

    :param list[int] block: 64-bit block to encrypt
    :param list[list[int]] sub_keys: 16 48-bit sub-keys.
    :return: list of encrypted bits
    :rtype: list[int]
    """
    block = _permute(block, _INIT_PERMUTATION)
    for i in range(16):
        # split each side
        left = block[:32]
        right = block[32:]

        # make sure to copy list to make sure we're not just renaming it
        new_left = right.copy()
        new_right = _xor(_function(right, sub_keys[i]), left)
        block = new_left + new_right

    # swap the side one more time before final permutation
    return _permute(block[32:] + block[:32], _FINAL_PERMUTATION)


def encrypt(data, key, mode="ECB", iv=None):
    """
    Encrypt data using DES.

    :param bytes data: data to encrypt.
    :param bytes key: key to use for encryption.
    :param str mode: ECB, CBC, or OFB.
    :param bytes iv: initialization vector.
    :return: ciphertext
    :rtype: bytes
    """
    if mode != "OFB":
        data = _add_padding(data)
    plaintext = _bytes_to_bit_array(data)
    if iv:
        iv = _bytes_to_bit_array(iv)
    ciphertext = []
    sub_keys = _generate_sub_keys(key)

    for pt_block in _nsplit(plaintext, 64):
        if mode == "ECB":
            # encrypt 64 bits at a time
            ciphertext += _crypt_block(pt_block, sub_keys)
        if mode == "CBC":
            temp_block = _xor(pt_block, iv)
            iv = _crypt_block(temp_block, sub_keys)
            ciphertext += iv
        if mode == "OFB":
            iv = _crypt_block(iv, sub_keys)
            ciphertext += _xor(pt_block, iv)

    ciphertext = _bit_array_to_bytes(ciphertext)
    return ciphertext


def decrypt(data, key, mode="ECB", iv=None):
    """
    Decrypt data using DES.

    :param bytes data: data to decrypt.
    :param bytes key: key to use for decryption.
    :param str mode: ECB, CBC, or OFB.
    :param bytes iv: initialization vector.
    :return: plaintext
    :rtype: bytes
    """
    ciphertext = _bytes_to_bit_array(data)
    if iv:
        iv = _bytes_to_bit_array(iv)
    plaintext = []
    if mode != "OFB":
        sub_keys = list(reversed(_generate_sub_keys(key)))
    else:
        sub_keys = _generate_sub_keys(key)

    for ct_block in _nsplit(ciphertext, 64):
        if mode == "ECB":
            # encrypt 64 bits at a time
            plaintext += _crypt_block(ct_block, sub_keys)
        if mode == "CBC":
            temp_block = _crypt_block(ct_block, sub_keys)
            plaintext += _xor(temp_block, iv)
            iv = ct_block
        if mode == "OFB":
            iv = _crypt_block(iv, sub_keys)
            plaintext += _xor(ct_block, iv)

    plaintext = _bit_array_to_bytes(plaintext)
    if mode != "OFB":
        plaintext = _rem_padding(plaintext)
    return plaintext


def run_unit_tests():
    """
    Run tests of DES functions
    """
    # region PAD
    pad_test_in1 = b'CSC428'
    pad_test_out1 = b'CSC428\x02\x02'

    pad_test_in2 = b'TALLMAN'
    pad_test_out2 = b'TALLMAN\x01'

    pad_test_in3 = b'JTALLMAN'
    pad_test_out3 = b'JTALLMAN\x08\x08\x08\x08\x08\x08\x08\x08'

    assert _add_padding(pad_test_in1) == pad_test_out1, f"Unit test #1 failed: _add_padding({pad_test_in1})"
    assert _add_padding(pad_test_in2) == pad_test_out2, f"Unit test #2 failed: _add_padding({pad_test_in2})"
    assert _add_padding(pad_test_in3) == pad_test_out3, f"Unit test #3 failed: _add_padding({pad_test_in3})"

    assert _rem_padding(pad_test_out1) == pad_test_in1, f"Unit test #4 failed: _rem_padding({pad_test_out1})"
    assert _rem_padding(pad_test_out2) == pad_test_in2, f"Unit test #5 failed: _rem_padding({pad_test_out2})"
    assert _rem_padding(pad_test_out3) == pad_test_in3, f"Unit test #6 failed: _rem_padding({pad_test_out3})"
    # endregion
    # region BTB
    btb_test_in1 = b'\x00'
    btb_test_out1 = [0, 0, 0, 0, 0, 0, 0, 0]

    btb_test_in2 = b'\xA5'
    btb_test_out2 = [1, 0, 1, 0, 0, 1, 0, 1]

    btb_test_in3 = b'\xFF'
    btb_test_out3 = [1, 1, 1, 1, 1, 1, 1, 1]

    assert _bytes_to_bit_array(btb_test_in1) == btb_test_out1, \
        f"Unit test #7 failed: _bytes_to_bit_array({btb_test_in1})"
    assert _bytes_to_bit_array(btb_test_in2) == btb_test_out2, \
        f"Unit test #8 failed: _bytes_to_bit_array({btb_test_in2})"
    assert _bytes_to_bit_array(btb_test_in3) == btb_test_out3, \
        f"Unit test #9 failed: _bytes_to_bit_array({btb_test_in3})"

    assert _bit_array_to_bytes(btb_test_out1) == btb_test_in1, \
        f"Unit test #10 failed: _bit_array_to__bytes({btb_test_out1})"
    assert _bit_array_to_bytes(btb_test_out2) == btb_test_in2, \
        f"Unit test #11 failed: _bit_array_to__bytes({btb_test_out2})"
    assert _bit_array_to_bytes(btb_test_out3) == btb_test_in3, \
        f"Unit test #12 failed: _bit_array_to__bytes({btb_test_out3})"
    # endregion
    # region NSPLIT
    nsplit_in1 = b"1111222233334444"
    nsplit_sz1 = 4
    nsplit_out1 = [b'1111', b'2222', b'3333', b'4444']
    nsplit_test1 = _nsplit(nsplit_in1, nsplit_sz1)
    nsplit_join1 = [item for item in nsplit_test1]

    nsplit_in2 = b"ABCDEFGHIJKLMN"
    nsplit_sz2 = 3
    nsplit_out2 = [b'ABC', b'DEF', b'GHI', b'JKL', b'MN']
    nsplit_test2 = _nsplit(nsplit_in2, nsplit_sz2)
    nsplit_join2 = [item for item in nsplit_test2]

    nsplit_in3 = b"THE CODE BOOK BY SINGH"
    nsplit_sz3 = 5
    nsplit_out3 = [b'THE C', b'ODE B', b'OOK B', b'Y SIN', b'GH']
    nsplit_test3 = _nsplit(nsplit_in3, nsplit_sz3)
    nsplit_join3 = [item for item in nsplit_test3]

    assert nsplit_join1 == nsplit_out1, f"Unit test #13 failed: _nsplit({nsplit_in1})"
    assert nsplit_join2 == nsplit_out2, f"Unit test #14 failed: _nsplit({nsplit_in2})"
    assert nsplit_join3 == nsplit_out3, f"Unit test #15 failed: _nsplit({nsplit_in2})"
    # endregion
    # region XOR
    xor_test_inx1 = [0, 0, 0, 0, 0, 0, 0, 0]
    xor_test_iny1 = [1, 1, 1, 1, 1, 1, 1, 1]
    xor_test_out1 = [1, 1, 1, 1, 1, 1, 1, 1]

    xor_test_inx2 = [1, 0, 1, 0, 0, 0, 0, 0]
    xor_test_iny2 = [0, 1, 0, 1, 0, 1, 0, 1]
    xor_test_out2 = [1, 1, 1, 1, 0, 1, 0, 1]

    xor_test_inx3 = [1, 1, 1, 1, 1, 1, 0, 0]
    xor_test_iny3 = [1, 1, 1, 1, 1, 1, 1, 1]
    xor_test_out3 = [0, 0, 0, 0, 0, 0, 1, 1]

    assert _xor(xor_test_inx1, xor_test_iny1) == xor_test_out1, \
        f"Unit test #16 failed: _xor({xor_test_inx1}, {xor_test_iny1})"
    assert _xor(xor_test_inx2, xor_test_iny2) == xor_test_out2, \
        f"Unit test #17 failed: _xor({xor_test_inx2}, {xor_test_iny2})"
    assert _xor(xor_test_inx3, xor_test_iny3) == xor_test_out3, \
        f"Unit test #18 failed: _xor({xor_test_inx3}, {xor_test_iny3})"
    # endregion
    # region LSHIFT
    ls_test_in1 = ['a', 'b', 'c', 'd', 'e', 'f']
    ls_test_ns1 = 3
    ls_test_ou1 = ['d', 'e', 'f', 'a', 'b', 'c']

    ls_test_in2 = [1, 0, 1, 0, 1, 0, 1, 0]
    ls_test_ns2 = 1
    ls_test_ou2 = [0, 1, 0, 1, 0, 1, 0, 1]

    assert _lshift(ls_test_in1, ls_test_ns1) == ls_test_ou1, \
        f"Unit test #19 failed: _lshift({ls_test_in1}, {ls_test_ns1})"
    assert _lshift(ls_test_in2, ls_test_ns2) == ls_test_ou2, \
        f"Unit test #20 failed: _lshift({ls_test_in2}, {ls_test_ns2})"
    # endregion
    # region PERMUTE
    perm_test_in = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]

    perm_test_out1 = _INIT_PERMUTATION
    perm_test_out2 = _FINAL_PERMUTATION
    perm_test_out3 = _EXPAND
    perm_test_out4 = _S_BOX_PERMUTATION

    assert _permute(perm_test_in, _INIT_PERMUTATION) == perm_test_out1, \
        f"Unit test #21 failed: _permute({perm_test_in[:10]}, _INIT_PERMUTATION)"
    assert _permute(perm_test_in, _FINAL_PERMUTATION) == perm_test_out2, \
        f"Unit test #22 failed: _permute({perm_test_in[:10]}, _FINAL_PERMUTATION)"
    assert _permute(perm_test_in, _EXPAND) == perm_test_out3, \
        f"Unit test #23 failed: _permute({perm_test_in[:10]}, _EXPAND)"
    assert _permute(perm_test_in, _S_BOX_PERMUTATION) == perm_test_out4, \
        f"Unit test #24 failed: _permute({perm_test_in[:10]}, _CONTRACT)"
    # endregion
    # region SBOX
    sbox_test_in = [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1,
                    1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1]
    sbox_test_out = [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0]

    assert _substitute(sbox_test_in) == sbox_test_out, f"Unit test #25 failed: _substitute({sbox_test_in[:10]}...)"
    # endregion
    # region SUB-KEY
    subkey_test_in = b"\xEF\x00\xEF\x00\xFF\x80\xFF\x80"
    subkey_test_out = [[0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1,
                        1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                       [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
                        0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
                       [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
                        0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1],
                       [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,
                        0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1],
                       [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,
                        0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1],
                       [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,
                        0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1],
                       [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,
                        0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1],
                       [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,
                        0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1],
                       [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0,
                        0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                       [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,
                        1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                       [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,
                        1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                       [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0,
                        1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                       [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0,
                        1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
                       [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0,
                        1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                       [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
                        1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                       [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1,
                        0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1]]

    assert _generate_sub_keys(subkey_test_in) == subkey_test_out, \
        f"Unit test #26 failed: _generate_sub_keys({subkey_test_in})"
    # endregion
    # region FUNC
    func_test_right_in = [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,
                          1]
    func_test_key_in = [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,
                        0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1]
    func_test_out = [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0]

    assert _function(func_test_right_in, func_test_key_in) == func_test_out, \
        f"Unit test #27 failed: _function({func_test_right_in[:10]}..., {func_test_key_in[:10]}...)"
    # endregion

    print("ALL UNIT TESTS PASS")


def run_system_test():
    # region ECB
    encrypt_ecb = encrypt(b'this is a test!', b'\x01\x02\x03\x04\x05\x06\x07\x08')
    decrypt_ecb = decrypt(encrypt_ecb, b'\x01\x02\x03\x04\x05\x06\x07\x08')

    assert _as_hex(encrypt_ecb) == "c61d5489ea1cc84a1b18279680f57777", "Encrypt ECB Test Failed."
    assert decrypt_ecb == b'this is a test!', "Decrypt ECB Test Failed."
    # endregion
    # region CBC
    encrypt_cbc = encrypt(b'this is a test!', b'\x01\x02\x03\x04\x05\x06\x07\x08', mode="CBC",
                          iv=b'\x00\x00\x00\x00\x00\x00\x00\x00')
    decrypt_cbc = decrypt(encrypt_cbc, b'\x01\x02\x03\x04\x05\x06\x07\x08', mode="CBC",
                          iv=b'\x00\x00\x00\x00\x00\x00\x00\x00')

    assert _as_hex(encrypt_cbc) == "c61d5489ea1cc84a1997dbda94b975dc", "Encrypt CBC Failed."
    assert decrypt_cbc == b'this is a test!', "Decrypt CBC Test Failed."
    # endregion
    # region OFB
    encrypt_ofb = encrypt(b'this is a test!', b'\x01\x02\x03\x04\x05\x06\x07\x08', mode="OFB",
                          iv=b'\x00\x00\x00\x00\x00\x00\x00\x00')
    decrypt_ofb = decrypt(encrypt_ofb, b'\x01\x02\x03\x04\x05\x06\x07\x08', mode="OFB",
                          iv=b'\x00\x00\x00\x00\x00\x00\x00\x00')
    assert _as_hex(encrypt_ofb) == "c41bb54c9260204de53b958ead4f0b", "Encrypt OFB Failed."
    assert decrypt_ofb == b'this is a test!', "Decrypt OFB Test Failed."
    # endregion

    print("SYSTEM TEST PASS")


if __name__ == '__main__':
    run_unit_tests()
    run_system_test()
